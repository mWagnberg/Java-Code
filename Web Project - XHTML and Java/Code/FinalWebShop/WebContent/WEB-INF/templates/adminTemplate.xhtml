<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
	<h:head>
		<h:outputStylesheet library="css" name="loader.css"/><!-- To show the progress circle to interact with AJAX -->
		<title>Welcome to Admin Pages</title>
	</h:head>

	<h:body onload="#{adminBean.resetAdminPage()}">
	<h:outputStylesheet library="css" name="adminTemplate_style.css"/>
	<h:outputScript library="js" name="fixAjax.js" target="head" />
		<div id="top">
			<ui:insert name="top">Welcome to Admin Pages</ui:insert>
		</div>
		<div id="center">
			<ui:insert name="center">
				<!-- Next we'll choose the logout tool whether it is a link or a button (used button now and commented the link) -->
				<!-- <h:form style="float: right;">
					<h:commandLink style="float: right;" action="#{loginBean.logout()}" value="Logout" />
				</h:form> -->
				<h:form style="float: right;">
					<h:commandButton styleClass="button" style="float: right;" action="#{loginBean.logout()}" value="Logout" />
				</h:form>
				<h:form id="radios"><!-- Will use the CSS styling to hide the radios and keep the button-like-labels -->
					<!-- A nice simple (without javascript) 'Radio as toggle buttons' got it from site:
						'http://jsfiddle.net/davidelrizzo/DYJkG/' (it's a test station.. original source not found)
						but was for html and headache-ly changed to match JSF (check CSS file) -->
					<!-- (Solved it.. :-) check fixRender.js file ) Next component, first I had to use 'onchange="this.form.submit();' coz AJAX gave me some strange behavior on this particular one -->
					<h:selectOneRadio id="radioBut" enabledClass="toggle-btn-grp" value="#{adminBean.section}">
						<f:selectItem itemValue="Orders" itemLabel="Orders" />
						<f:selectItem itemValue="#{adminBean.section.startsWith('Products') ? adminBean.section : 'Products:ViewProducts'}" itemLabel="Products" />
						<f:selectItem itemValue="Accounts" itemLabel="Admin Accounts" />
						<f:ajax render="@all" event="change" listener="#{adminBean.resetAdminPage()}" />
					</h:selectOneRadio>
				</h:form>
			</ui:insert>
		</div>
		<div id="bottom">
			<ui:insert name="bottom">Bottom</ui:insert>
		</div>

		<div class="modal"></div>
		<!-- Place at bottom of page before JS -->
		<!-- Found this on this site "http://javaevangelist.blogspot.se/2014/02/jsf-22-tip-of-day-using-jsf-ajax-events.html"
			Check accompanying "loader.css" file and javascript down, for more detail on how it works with our web-shop project -->
		<script type="text/javascript">
			function handleAjax(data) {
				var status = data.status;
 
				switch (status) {
					case "begin":
						// This is the start of the AJAX request.
						document.getElementsByTagName('body')[0].className = 'loading';
						break;
 
					//case "complete": // Uncomment when needed
					// This is invoked right after AJAX response is returned.
					//	break;
 
					case "success":
						// This is invoked right after successful processing of AJAX response and update of HTML DOM.
						document.getElementsByTagName('body')[0].className = '';
						//break;
				}
			}
			// Setup the statusUpdate function to hear all events on the page
			jsf.ajax.addOnEvent(handleAjax);
		</script>
	</h:body>
</html>
